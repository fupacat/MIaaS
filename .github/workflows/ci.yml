name: CI

# Triggers: Run on push or pull request to main/master branches
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Job 1: Control Plane - Python backend testing
  control-plane:
    name: Control Plane Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-control-plane-${{ hashFiles('control-plane/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-control-plane-
            ${{ runner.os }}-pip-

      - name: Install control-plane dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f control-plane/requirements.txt ]; then
            pip install -r control-plane/requirements.txt
            echo "✓ Installed control-plane dependencies"
          else
            echo "⚠ control-plane/requirements.txt not found, skipping"
          fi
        continue-on-error: false

      - name: Run control-plane tests
        run: |
          if [ -d control-plane/tests ]; then
            cd control-plane
            python -m pytest tests/ -v --tb=short
            echo "✓ Control-plane tests passed"
          else
            echo "⚠ control-plane/tests directory not found, skipping tests"
          fi
        continue-on-error: false

      - name: Lint control-plane with flake8
        run: |
          pip install flake8
          if [ -d control-plane ]; then
            cd control-plane
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=tests,__pycache__,.pytest_cache
            echo "✓ Control-plane linting passed (error-only)"
          fi
        continue-on-error: true

  # Job 2: Agent - Python agent testing
  agent:
    name: Agent Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-agent-${{ hashFiles('agent/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-agent-
            ${{ runner.os }}-pip-

      - name: Install agent dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f agent/requirements.txt ]; then
            pip install -r agent/requirements.txt
            echo "✓ Installed agent dependencies"
          else
            echo "⚠ agent/requirements.txt not found, skipping"
          fi
        continue-on-error: false

      - name: Validate agent code
        run: |
          if [ -f agent/agent.py ]; then
            python -m py_compile agent/agent.py
            echo "✓ Agent code compiles successfully"
          else
            echo "⚠ agent/agent.py not found, skipping validation"
          fi
        continue-on-error: true

      - name: Run agent tests
        run: |
          if [ -d agent/tests ]; then
            cd agent
            python -m pytest tests/ -v --tb=short
            echo "✓ Agent tests passed"
          else
            echo "ℹ agent/tests directory not found - no tests to run yet"
          fi
        continue-on-error: true

      - name: Lint agent with flake8
        run: |
          pip install flake8
          if [ -d agent ]; then
            cd agent
            flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=tests,__pycache__,.pytest_cache
            echo "✓ Agent linting passed (error-only)"
          fi
        continue-on-error: true

  # Job 3: UI - React frontend testing
  ui:
    name: UI Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install UI dependencies
        run: |
          if [ -f ui/package.json ]; then
            cd ui
            npm ci
            echo "✓ Installed UI dependencies"
          else
            echo "⚠ ui/package.json not found, skipping"
            exit 0
          fi
        continue-on-error: false

      - name: Lint UI
        run: |
          if [ -f ui/package.json ]; then
            cd ui
            npm run lint
            echo "✓ UI linting passed"
          fi
        continue-on-error: false

      - name: Build UI
        run: |
          if [ -f ui/package.json ]; then
            cd ui
            npm run build
            echo "✓ UI build successful"
          fi
        continue-on-error: false

  # Job 4: Integration Tests (if ci/tests exists)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python 3.11
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: Install root dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            echo "✓ Installed root dependencies"
          else
            echo "ℹ No root requirements.txt found"
          fi
        continue-on-error: true

      - name: Run integration tests
        run: |
          if [ -d ci/tests ]; then
            python -m unittest discover ci/tests -v
            echo "✓ Integration tests passed"
          else
            echo "ℹ ci/tests directory not found - no integration tests to run yet"
            echo "This is expected for early project stages"
          fi
        continue-on-error: true

  # Job 5: Docker Build Validation
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build control-plane Docker image
        run: |
          if [ -f control-plane/Dockerfile ]; then
            docker build -t miaas-control-plane:test ./control-plane
            echo "✓ Control-plane Docker image built"
          else
            echo "ℹ control-plane/Dockerfile not found, skipping"
          fi
        continue-on-error: true

      - name: Build agent Docker image
        run: |
          if [ -f agent/Dockerfile ]; then
            docker build -t miaas-agent:test ./agent
            echo "✓ Agent Docker image built"
          else
            echo "ℹ agent/Dockerfile not found, skipping"
          fi
        continue-on-error: true

      - name: Build UI Docker image
        run: |
          if [ -f ui/Dockerfile ]; then
            docker build -t miaas-ui:test ./ui
            echo "✓ UI Docker image built"
          else
            echo "ℹ ui/Dockerfile not found, skipping"
          fi
        continue-on-error: true

      - name: Validate docker-compose
        run: |
          if [ -f docker-compose.yml ]; then
            docker compose config
            echo "✓ docker-compose.yml is valid"
          else
            echo "ℹ docker-compose.yml not found, skipping"
          fi
        continue-on-error: true
